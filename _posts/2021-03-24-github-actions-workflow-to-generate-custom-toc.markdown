---
layout: post
title:  Github actions workflow to generate custom TOC
date:   2021-03-24 11:01:56 +0530
categories: github automation 
---

## <u>Background</u>

Other than writing code, I have been using github for storing and organizing my daily notes. Github allows simplicity and flexibility to work with markdown notes, further it has the ability to version the files and view them across multiple devices. But as the total number of the file grows navigation becomes a bottleneck.
To tackle this issue I am generating a table of content(TOC) in the README so that I can quickly access a file from the README itself. The other advantage it provides is I get a summary of all notes I have in the project.

In this article, I am going to show you how to create a github actions workflow and make it generate the table of contents automatically for your project.


## <u>Workflow</u>

Github Actions enables us to create workflows (like CI/CD capabilities) that can be integrated directly into our github code repository and runs on github hosted environments. These workflows are triggered automatically on occurrence of some event.

I have all the code and files committed in this demo github repository [toc-demo](https://github.com/Akatsuki06/toc-workflow-demo).
This is how the file structure for the example project looks like.

<p align="center">
  <img src="https://user-images.githubusercontent.com/16136908/112720042-278acd00-8f22-11eb-9b4e-82c7b2b2f776.png" alt="Sublime's custom image"/>
</p>



The github actions workflow is defined in a yaml file so we will create a file `.github/workflows/action.yml`.

We will write a script that can generate the table of contents and then commit the changes and push! We will automate this workflow using the github actions.

### Workflow file

```yaml
name: toc-workflow-demo
on:
  push:
    branches: [ main ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo content
        uses: actions/checkout@v2
      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: execute py script
        run: |
          python script.py
      - name: commit changes
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          echo `git add . && git commit -m "Auto generated commit"`
          echo `git push`
      - name: Update Status
        run: |
          echo Updated Index successfully,
          echo Auto commit changes
```

Summarizing the action file:

- the job is triggered when changes are pushed on to the `main` branch.
- the steps explained:
  - the `actions/checkout@v2` checks-out the repository `toc-workflow-demo`.
  - the `actions/setup-python@v2` setups python v3.8 in our actions environment.
  - the job runs a script  `script.py` to generate TOC and write to a file
  - the end step is to commit the changes script made and push them to github.


### Script

To generate TOC we require the name and path of all files.
This python script reads through all files in the directory and generates a table of content in a tree hierarchy format. You can modify this script to create what fits you best.

```python
import os
             
f=open('README.md','w+')
f.write('# Notes')
f.write('\n\n\n')
startpath = './notes'

for root, dirs, files in os.walk(startpath):
    if root is not startpath:
      level = root.replace(startpath, '').count(os.sep) -1
      indent = ' ' * 2 * (level)
      f.write('{}- {}'.format(indent, os.path.basename(root)))
      f.write('\n')
      subindent = ' ' * 2 * (level + 1)
      for file in files:
        path = os.path.join(root,file)
        f.write("{}- [{}]({})".format(subindent,file[:-3],path))
        f.write('\n')
```


### <u>Conclusion</u>

Once all the code changes are committed and code is pushed to github. Github actions will run the jobs and auto-commit the table of content to project README.
The following table of content has been generated by the github actions in the demo project.
We can click on the file name to navigate to the file.
![image](https://user-images.githubusercontent.com/16136908/112727828-48671880-8f4a-11eb-99e5-5c7f8858fc16.png)

Next time any new file is added, removed or modified and committed to github, github actions will take care of generating the TOC in the project README.
